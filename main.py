# generated by fastapi-codegen:
#   filename:  api.yaml
#   timestamp: 2021-05-24T07:37:30+00:00

from __future__ import annotations

from typing import Optional
from fastapi import FastAPI, Query
from flask import jsonify
from models import InputData,Pets,OutputData
from firebase_admin import db
import json
import firebase_admin
from firebase_admin import credentials
import workload
cred = credentials.Certificate("ameytest-89386-firebase-adminsdk-ysgzo-9e94115caa.json")
firebase_admin.initialize_app(cred, {
	'databaseURL':"https://ameytest-89386-default-rtdb.asia-southeast1.firebasedatabase.app/"
	})

app = FastAPI(
    version='1.0.0',
    title='Swagger Petstore',
    license={'name': 'MIT'},
)


@app.get('/pets', response_model=Pets)
def list_pets(limit: Optional[int] = None) -> Pets:
    """
    List all pets
    """
    pass


@app.post('/')
#@logger.catch()  # catch any unexpected breaks
def add_data(incoming_data: InputData):
    
    # Make predictions based on the incoming data and saved neural net
    output = workload.result(incoming_data)
    print(type(output))
    ref = db.reference("/")
    ref.push().set(output)    
    # Return the predicted class and the predicted probability
    return ({"Success":200})

@app.get('/get/', response_model=OutputData)
def get_data():
    ref = db.reference("/")
    print(ref.get())
    result = {"result":ref.get()}
    return result

@app.patch('/update/{uid}')
def update_data(uid:int, incoming_data: InputData):
    ref = db.reference("/")
    all_data = ref.get()
    outputData = json.dumps(all_data)
    print(outputData)
    for y,x in all_data.items():
        # k = json.loads(x)
        if (x["id"]==uid):
            ref.child(y).update({"skills":"Python"})
            print(x)
    return True

@app.delete('/delete/{uid}')
def delete_data(uid:int):
    ref = db.reference("/")
    all_data = ref.get()
    for x,y in all_data.items():
        if (y["id"]==uid):
            ref.child(x).set({})
    return True
